# let f = (b) => {
#     let thing = b.split("\n")
#     thing = thing.map((t) => {
#         t = t.trim()
        
#         return t.split(" ").reverse().join(" ")
#     }).reverse().join('\r\n')

#     thing = thing.replaceAll("1", "2")
#     thing = thing.replaceAll("0", "1")
#     thing = thing.replaceAll("2", "0")
    
#     return thing
# }

rules:
  - category: Basics
    scenarios:
    - name: "Place tiles by your dock or your own tiles" # Implicitly covers that players take turns and you play as blue
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ |0 ~~
        ~~ ~~ ~~ __ __ __ #0 __ ~~
        ~~ __ ~~ ~~ __ __ __ __ ~~
        ~~ __ ~~ ~~ __ __ __ __ ~~
        ~~ __ ~~ __ __ __ __ ~~ ~~
        ~~ __ __ __ __ __ ~~ ~~ ~~
        ~~ __ __ __ __ __ __ __ ~~
        ~~ __ #1 #1 __ #1 __ ~~ ~~
        ~~ ~~ ~~ ~~ |1 ~~ ~~ ~~ ~~

      player_hand: ALIFIRM
      computer_hand: D

      dict: {}

      steps:
        - message: |-
            Welcome to Truncate!

            This tutorial covers the rules of the game.

        - message: |-
            In Truncate, players take turns to place a tile on the board

        - message: |-
            In this game you are playing as blue. You will always play as blue against the computer.

            You can tell which colour you're playing by the colour of the tiles in your hand.

        - description: |-
            You start the game by placing tiles beside your dock.

            Your dock is at the bottom left of the board. Try playing an 'L' there.
          you: "L -> 7,1"
          gets: "E"

        - description: |-
            Now it's your opponent's turn.

            Click Next to see their first move.
          computer: "D -> 4,7"
          gets: "R"

        - description: |-
            Once you've placed a tile, you can place tiles beside your dock or your existing tiles.

            Try playing an 'I' beside the 'L' you just played.
          you: "I -> 7,2"
          gets: "E"

    - name: "To win, touch an opponent's town with a valid word"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        ~~ ~~ __ __ ~~ ~~ ~~ ~~ ~~
        ~~ __ __ __ __ ~~ ~~ ~~ ~~
        ~~ __ __ __ __ ~~ __ __ ~~
        ~~ __ __ __ __ __ __ #1 ~~
        |0 G0 N0 I0 W0 O0 R0 __ ~~
        ~~ #0 __ __ __ __ __ __ |1
        ~~ __ __ __ ~~ __ __ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: GSUYIFZ
      computer_hand: D

      dict:
        GROWING: present past participle of grow

      steps:
        - message: |-
            To win Truncate, you must touch your opponent's town with a valid word.

            Notice that your dock is on the right hand side on this boad, and your opponent's town and dock are on the left.

        - description: |-
            Place 'G' beside your opponent's town to form the word 'GROWING' and win the game.
          you: "G -> 7,5"
          gets: "E"

    - name: "Tiles don't always have to form valid words"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        ~~ #1 __ __ ~~ ~~ ~~ ~~ ~~
        |1 __ U0 O0 Y0 ~~ ~~ ~~ ~~
        ~~ __ __ __ Z0 U0 Y0 T0 ~~
        ~~ __ __ __ __ ~~ __ Q0 ~~
        ~~ __ __ __ __ ~~ __ X0 ~~
        ~~ __ __ __ __ ~~ #0 A0 ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ |0 ~~

      player_hand: RTUYIL
      computer_hand: D

      dict:
        YOUR: Belonging to you; of you; related to you

      steps:
        - description: |-
            To win, the word touching your opponent's town has to be valid, but the rest of your words don't.

            You will win if you play 'R' to form 'YOUR', even though you have invalid words like 'AXQT' on your board.
          you: "R -> 1,2"
          gets: "E"

    - name: "Your words are read left to right and top to bottom, and your opponent's words are the opposite"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        ~~ ~~ ~~ ~~ __ S0 __ __ ~~ ~~
        ~~ ~~ ~~ __ __ D0 __ __ #0 ~~
        ~~ __ __ T1 __ R0 U0 O0 Y0 |0
        ~~ __ __ H1 __ O0 __ __ __ ~~
        ~~ #1 __ E1 __ W0 __ __ __ ~~
        ~~ __ __ I1 __ __ __ __ ~~ ~~
        |1 W1 O1 R1 D1 S1 __ ~~ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: RTUYIL
      computer_hand: D

      dict: {}

      steps:
        - message: |-
            Your words are written left to right and top to bottom as normal, but your opponent's words are reversed.

            Your words on this board spell "YOUR WORDS" and your opponent's words spell "THEIR WORDS."
        - message: |-
            To make sense of this, imagine that you were playing Truncate as a board game, and you opponent was sitting on the opposite side of the table.

    - name: "You can swap two tiles on the board"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        |1 __ __ __ __ __ __ __ ~~ ~~
        ~~ #1 ~~ __ __ __ __ __ ~~ ~~
        ~~ ~~ ~~ __ __ __ __ __ ~~ ~~
        ~~ __ __ __ __ __ __ __ __ ~~
        ~~ __ __ __ I0 D0 L0 A0 V0 |0
        ~~ ~~ __ __ __ __ #0 ~~ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: KFAGUMI
      computer_hand: D

      dict: {}

      steps:
        - description: |-
            Instead of playing a tile from your hand, you can swap two tiles on the board.

            Try turning "VALDI" into "VALID" by swapping the "D" and "I." Note, you can't swap between the board and your hand.
          you: "4,5 -> 5,5"
          gets: "_"

  - category: Battles
    scenarios:
    - name: "Valid words beat invalid words"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ |0 ~~ ~~
        ~~ __ __ __ __ __ __ I0 ~~ ~~
        ~~ __ __ N1 __ P0 O0 P0 __ ~~
        ~~ __ __ I1 __ __ __ __ __ ~~
        ~~ __ __ V1 __ __ __ __ __ ~~
        ~~ __ __ A1 __ __ __ ~~ ~~ ~~
        ~~ __ __ L1 __ __ __ ~~ ~~ ~~
        ~~ #1 __ D1 __ __ __ __ ~~ ~~
        ~~ __ __ I1 __ __ __ __ __ ~~
        ~~ ~~ ~~ |1 ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: UMSIKQU
      computer_hand: D

      dict:
        POPS: Father, dad.

      steps:
        - message: |-
            When your tiles and the opponent's tiles touch there is a battle.

            The battle is between the words that are touching, and valid words beat invalid words.
          
        - description: |-
            Try playing "POPS" which will defeat the opponent's word "NIVALDI" because it's invalid.
          you: "S -> 4,2"
          gets: "E"

    - name: "Battles only involve touching words"
      board: |-
        ~~ ~~ ~~ |0 ~~ ~~ ~~ ~~ ~~ ~~
        ~~ ~~ X0 Q0 Z0 __ __ __ ~~ ~~
        ~~ __ X0 __ U0 O0 X0 Z0 __ ~~
        ~~ __ __ __ __ __ __ __ ~~ ~~
        ~~ ~~ __ __ __ F1 T1 __ ~~ ~~
        ~~ __ __ __ __ __ O1 __ ~~ ~~
        ~~ __ __ ~~ ~~ __ U1 __ __ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ R1 I1 G1 |1
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: YTIGHUI
      computer_hand: D

      dict:
        TO: A particle used for marking the following verb as an infinitive.

      steps:
        - message: |-
            The only words involved in a battle are the ones are actually touching the opponent's words.

            This means our board can consist of largely invalid words, yet we can still win battles.
          
        - description: |-
            Try playing "TO" against the opponent's "TF".
            
            Even though your board is mostly invalid, the only words involved in the battle are "TO" and "TF", so you'll win.
          you: "T -> 5,3"
          gets: "E"
            
    - name: "Long words beat short words"
      board: |-
        ~~ ~~ ~~ |0 ~~ ~~ ~~ ~~ ~~ ~~
        ~~ #0 __ T0 __ __ ~~ ~~ ~~ ~~
        ~~ __ __ U0 __ __ __ __ __ ~~
        ~~ S0 U0 O0 M0 R0 O0 N0 __ ~~
        ~~ __ __ __ __ __ __ __ P1 ~~
        ~~ __ __ __ __ ~~ __ __ U1 ~~
        ~~ ~~ __ __ __ ~~ __ __ N1 ~~
        ~~ ~~ ~~ __ ~~ ~~ __ #1 Y1 ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ |1 ~~

      player_hand: ETHRYUF
      computer_hand: D

      dict:
        ENORMOUS: Deviating from the norm; unusual, extraordinary.

      steps:
        - description: |-
            Long words beat short words in a battle. "ENORMOUS" is significantly longer than "PUNY" and would win in a battle.

            Try playing an "E" to defeat the opponent's word.
          you: "E -> 8,3"
          gets: "F"

    - name: "The defender has a length bonus"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ |0 ~~ ~~ ~~ ~~
        ~~ __ ~~ ~~ #0 __ E0 __ ~~ ~~ ~~
        ~~ __ ~~ __ __ __ N0 __ __ ~~ ~~
        ~~ __ __ E0 G0 N0 O0 L0 __ __ ~~
        ~~ __ C1 __ __ __ __ I0 __ __ ~~
        ~~ __ A1 __ __ __ __ A0 ~~ __ ~~
        ~~ #1 P1 __ R0 O0 H0 S0 ~~ __ ~~
        |1 A1 S1 __ ~~ ~~ __ ~~ ~~ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: TYUIGII
      computer_hand: H

      dict:
        SHORT: Having a small distance from one end or edge to another, either horizontally or vertically.
        LONGER: |-
          adj; comparative form of long: more long
        CAPS: |-
          noun: plural of cap.

      steps:
        - message: |-
            In Truncate, there is a defender's advantage of 2.

            If the defending and attacking words are both valid, the attacking word must be 2 longer than the defending word to win.
        - description: |-
            Let's demonstrate a failed attack by playing "SHORT" into "CAPS."

            "SHORT" is longer, but only by one, and since it's the attacker, it will lose.
          you: "T -> 3,6"
          gets: "R"
        - description: |-
            Notice that when an attack fails, the attacker is destroyed.

            Thankfully, we just picked up an "R" and will be able to play "LONGER" next turn.
          computer: "H -> 3,7"
          gets: "H"
        - description: |-
            The opponent played "ASH."

            Try playing "LONGER." Since it is 2 letters longer than "CAPS" it will win.
          you: "R -> 2,3"
          gets: "R"
    
    - name: "The weakest defender is used"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ |0 ~~ ~~ ~~ ~~
        ~~ __ #0 ~~ ~~ __ P0 __ ~~ ~~ ~~
        ~~ __ __ __ __ __ A0 __ ~~ ~~ ~~
        ~~ __ __ A0 G0 A0 R0 __ __ ~~ ~~
        ~~ __ __ R0 __ __ __ __ __ __ ~~
        ~~ __ Q1 __ C1 __ P1 I1 __ __ ~~
        ~~ __ X1 __ A1 __ A1 __ __ __ ~~
        ~~ __ A1 I1 L1 __ I1 __ __ __ ~~
        ~~ __ ~~ __ F1 U1 R1 #1 __ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ |1 ~~ ~~ ~~ ~~ ~~

      player_hand: PLTGHYY
      computer_hand: R

      dict:
        ERA: |- 
          noun: A time period of indeterminate length, usually more than a year.
        TRAP: |- 
          noun: A machine designed to catch and (and sometimes kill) animals, either by holding them in a container or catching hold of part of their body.
        PAIR: |- 
          noun: Two similar or identical things taken together; often followed by of.
        CALF: |- 
          noun: A young cow or bull.

      steps:
        - message: |-
            Often multiple defenders will be involved in a battle.

            In Truncate, the weakest defender determines the outcome of the battle.
        - description: |-
            This means that even if you have a strong word, it can be undermined by a weaker one.

            For example, we can play "TRAP" against "PAIR" which normally wouldn't win due to the defenders advantage, but since "PI" is also involved we will win.
          you: "T -> 6,4"
          gets: "E"
        - message: |-
            Notice that "PI" was beaten and removed, but since it is shorter than "TRAP" but "PAIR" remains.

            Even though we won the battle, we don't destroy the words that are strong than our attacker.
        - description: |-
            However, since the "P" in "PAIR" was also in "PI", it was destroyed shortening "PAIR" to "AIR".

            Let's see what our oponent does.
          computer: "R -> 1,7"
          gets: "O"
        - message: |-
            Now we can attack our opponent's invalid word "QXA".

            We could play "RE" (the musical note) but we would be better off playing "ERA" and attacking "CALF" at the same time.
        - description: |-
            Since the weakest defender determines the battle, we will win, and we will actually damage "CALF" at the same time.

            Try playing "ERA".
          you: "E -> 3,5"
          gets: "A"
          # TODO: consinder moving out to separate rule?
        - message: |-
            Notice that the "C" in "CALF" was destroyed as well. This is for a different reason to why the opponent lost the "P" in "PAIR".

            The "C" was destroyed to keep the players' words disconnected.
    
    - name: "All attackers must be valid"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        ~~ __ ~~ ~~ __ __ __ __ ~~ ~~ ~~
        ~~ __ __ __ __ __ __ __ __ __ ~~
        |0 Q0 F0 R0 V0 A0 X0 __ __ __ ~~
        ~~ __ __ __ __ __ E0 __ __ __ ~~
        ~~ H0 G0 U0 O0 N0 __ __ __ __ ~~
        ~~ __ __ __ __ __ F1 O1 U1 R1 |1
        ~~ ~~ ~~ ~~ __ __ __ __ __ #1 ~~
        ~~ ~~ ~~ __ __ __ __ __ __ __ ~~
        ~~ ~~ ~~ __ __ __ __ __ __ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: ERTYELU
      computer_hand: R

      dict:
        ENOUGH: |-
          det: Sufficient; all that is required, needed, or appropriate.
        FOUR: |-
          num: A numerical value equal to 4; the number after 3 and before 5; two plus two. This many dots (????)

      steps:
        - description: |-
            When there are multiple attackers, all must be valid in order to win, otherwise all attackers are lost.

            Try playing "ENOUGH" and "EEX" against "FOUR." You will lose both attackers despite "ENOUGH" being strong enough to beat "FOUR."

          you: "E -> 6,5"
          gets: "I"

    - name: "The longest attacker is used"
      board: |-
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~
        ~~ __ ~~ ~~ __ __ __ __ ~~ ~~ ~~
        ~~ __ __ __ __ __ __ __ __ __ ~~
        |0 Q0 F0 R0 V0 A0 L0 __ __ __ ~~
        ~~ __ __ __ __ __ E0 __ __ __ ~~
        ~~ H0 G0 U0 O0 N0 __ __ __ __ ~~
        ~~ __ __ __ __ __ F1 O1 U1 R1 |1
        ~~ ~~ ~~ ~~ __ __ __ __ __ #1 ~~
        ~~ ~~ ~~ __ __ __ __ __ __ __ ~~
        ~~ ~~ ~~ __ __ __ __ __ __ ~~ ~~
        ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: ERTYELU
      computer_hand: R

      dict:
        ENOUGH: |-
          det: Sufficient; all that is required, needed, or appropriate.
        FOUR: |-
          num: A numerical value equal to 4; the number after 3 and before 5; two plus two. This many dots (????)
        EEL: |-
          noun: Any freshwater or marine fish of the order Anguilliformes, which are elongated and resemble snakes.

      steps:
        - message: |-
            When there are multiple attackers and all of them are valid, the longest attacker determines the outcome of the battle.
            
            Intuitively, this is because the attackers have the initiative, and can use their strongest words to target the weakest defenders.
        - description: |-
            Try playing "ENOUGH" and "EEL" against "FOUR."
            
            You will win because "ENOUGH" is long enough to beat "FOUR" and "EEL" is irrelevant.
          you: "E -> 6,5"
          gets: "I"

    - name: "Tiles disconnected from the dock are truncated"
      board: |-
        ~~ ~~ ~~ ~~ |0 ~~ ~~ ~~ ~~ ~~ ~~
        ~~ ~~ ~~ __ E0 #0 __ __ ~~ ~~ ~~
        ~~ ~~ __ __ T0 __ __ ~~ ~~ ~~ ~~
        ~~ __ __ __ A0 __ __ __ __ ~~ ~~
        ~~ __ S1 __ T0 __ __ __ __ ~~ ~~
        ~~ __ T1 __ S0 __ __ __ __ ~~ ~~
        ~~ ~~ R1 __ E0 __ __ __ ~~ ~~ ~~
        ~~ __ O1 __ __ __ __ ~~ ~~ ~~ ~~
        ~~ __ N1 O1 T1 __ __ __ __ ~~ ~~
        ~~ #1 G1 __ __ __ __ __ __ ~~ ~~
        ~~ ~~ |1 ~~ ~~ ~~ ~~ ~~ ~~ ~~ ~~

      player_hand: ERTYELU
      computer_hand: R

      dict:
        RESTATE: |-
          verb: to state again (without chaning)
        NOT: |-
          adv: Negates the meaning of the modified verb

      steps:
        - description: |-
            When a battle is lost and some tiles become disconnected from the dock, they are removed ("truncated").
            
            Try playing "RESTATE" against "NOT." "NOT" will be defeated and most of "STRONG" will be truncated.
          you: "R -> 4,7"
          gets: "I"
    



